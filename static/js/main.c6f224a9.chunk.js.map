{"version":3,"sources":["components/Navebar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navebar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","react_router_dom","aria-current","to","aboutText","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","backgroundColor","onChange","event","console","log","target","rows","newText","toUpperCase","split","length","defaultProps","About","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","aria-labelledby","data-bs-parent","border","App","setMode","setalert","showAlert","message","setTimeout","document","body","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.c6f224a9.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navebar(props) {\r\n  return (\r\n    // `` we can use backslash to use string as template litral in java\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\n//protypes : it is used to set data type for props \r\nNavebar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    aboutText : PropTypes.string,\r\n}\r\n\r\n//default props : It is used to give default value to props in case value not passed\r\n// then default value will be pass .\r\nNavebar.defaultProps = {\r\n    title : 'Set title here',\r\n    aboutText : 'About text here',\r\n}\r\n","import React ,{useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText] = useState('Enter Text Here ');\r\n\r\n    const handleUpClick = () =>{\r\n        console.log(\"Upper case was clicked \"+text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    //event we get from onChange method\r\n    const handleOnChange = (event) =>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value);//need to do because we are handling text from many where.\r\n        //so it is neccesary to update on onChange in text field also. \r\n    }\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-2\">\r\n        <textarea className=\"form-control\" value={text}\r\n        style={{backgroundColor: props.mode === 'dark' ? 'grey' : 'white',\r\n        color: props.mode === 'dark' ? 'white' : 'black'}} onChange={handleOnChange} id=\"myBox\" rows=\"7\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert To Upper Case</button>\r\n    </div>\r\n    <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h3>Your Text Summary</h3>\r\n        <p>{text.split(\" \").length} Words and {text.length} characters</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function (props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        //&& do if true then do further other wise not\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.message}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function () {\r\n    //creating object in javascript for styling\r\n    // let myStyle = {\r\n    //     color : 'white',\r\n    //     backgroundColor : \"black\"\r\n    // }\r\n\r\n    //do styling using state \r\n    const [myStyle,setMyStyle] = useState({\r\n        color : 'white',\r\n        backgroundColor : \"black\"\r\n    });\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable Light Mode\")\r\n\r\n    const toggleStyle = () => {\r\n        if(myStyle.color === 'white'){\r\n            setMyStyle({\r\n                color : 'black',\r\n                backgroundColor: 'white',\r\n                border : '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color : 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navebar from './components/Navebar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link,\n  BrowserRouter\n} from \"react-router-dom\";\n\n\nfunction App() {\n  //we will try to control whole application state through app.js file\n  const [mode, setMode] = useState('light');//whether dark mode enabled or not\n  const [alert, setalert] = useState(null)\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#081431' //to change color of the body\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title = 'TextUtils - Dark'\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white' //to change color of the body\n      showAlert(\"Light mode has been enabled\", \"success\")\n      document.title = 'TextUtils - Light'\n    }\n  }\n\n  //function to show alert\n  const showAlert = (message,type) => {\n    setalert({\n      message : message,\n      type : type\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 3000);\n  }\n\n  return (\n\n    <BrowserRouter>\n    <Navebar title= \"Textutils\" aboutText = \"About Text\" mode={mode} toggleMode={toggleMode}></Navebar>\n      <Routes>\n        <Route exact path=\"/\" element={\n          <TextForm heading = \"Enter The Text To Analyze \" mode={mode}></TextForm>\n        } />\n        {/* exact path is used instead to path to do exact navigation */}\n        <Route exact path=\"/about\" element={\n          <About></About>\n        } />\n      </Routes>\n    </BrowserRouter>\n\n\n    // <BrowserRouter>\n    // <Navebar title= \"Textutils\" aboutText = \"About Text\" mode={mode} toggleMode={toggleMode}></Navebar>\n    // <Alert alert={alert}></Alert>\n    // <div className=\"container my-3\"> \n\n    // <Routes>\n    //       <Route path=\"/about\">\n    //         <About />\n    //       </Route>\n    //       <Route path=\"/\">\n    //       <TextForm heading = \"Enter The Text To Analyze \" mode={mode}></TextForm>\n    //       </Route>\n    //     </Routes>\n\n      \n    //   {/* <About></About> */}\n    // </div>\n    // </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}